package typtmpl

import (
	"fmt"
	"io"

	"github.com/typical-go/typical-go/pkg/typast"
)

type (
	// DtorAnnotated template
	DtorAnnotated struct {
		Package string
		Imports []string
		Dtors   []*Dtor
	}
	// Dtor is destructor model
	Dtor struct {
		Def string
	}
)

//
// Dtor
//

// CreateDtor to create new instance of Dtor from Annotation
func CreateDtor(annot *typast.Annot) *Dtor {
	return &Dtor{
		Def: fmt.Sprintf("%s.%s", annot.Decl.Package, annot.Decl.Name),
	}
}

//
// DtorAnnotated
//

const dtorAnnotated = `package {{.Package}}

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() { {{if .Dtors}}
	typapp.AppendDtor({{range $d := .Dtors}}
		&typapp.Destructor{Fn: {{$d.Def}}},{{end}}
	){{end}}
}`

// Execute app precondition template
func (t *DtorAnnotated) Execute(w io.Writer) (err error) {
	return Parse("dtorGenerated", dtorAnnotated, t, w)
}
