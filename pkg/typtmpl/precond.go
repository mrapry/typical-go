package typtmpl

import (
	"io"
	"strings"
	"text/template"
)

var _ Template = (*Precond)(nil)

const precond = `package typical

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() { {{range $line := .Lines}}
	{{$line}}{{end}}
}
`

// Precond writer
type Precond struct {
	Imports []string
	Lines   []string
}

// AppendImport to append imports
func (i *Precond) AppendImport(imports ...string) {
	i.Imports = append(i.Imports, imports...)
}

// AppendLine to append init line
func (i *Precond) AppendLine(line string) {
	i.Lines = append(i.Lines, line)
}

// AppendWriter to append init line with wirter
func (i *Precond) AppendWriter(tmpl Template) {
	var b strings.Builder
	tmpl.Execute(&b)
	i.AppendLine(b.String())
}

// Execute precond template
func (i *Precond) Execute(w io.Writer) (err error) {
	var tmpl *template.Template
	if tmpl, err = template.New("precond").Parse(precond); err != nil {
		return
	}
	return tmpl.Execute(w, i)
}
