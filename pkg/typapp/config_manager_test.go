package typapp_test

import (
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typast"
	"github.com/typical-go/typical-go/pkg/typgo"
)

func TestConfigManager_GetTarget(t *testing.T) {
	testcases := []struct {
		TestName string
		*typapp.ConfigManager
		Context  *typast.Context
		Expected string
	}{
		{
			TestName:      "initial target is not set",
			ConfigManager: &typapp.ConfigManager{},
			Context: &typast.Context{
				Context: &typgo.Context{
					BuildSys: &typgo.BuildSys{
						Descriptor: &typgo.Descriptor{Name: "name0"},
					},
				},
			},
			Expected: "cmd/name0/config_annotated.go",
		},
		{
			TestName: "initial target is set",
			ConfigManager: &typapp.ConfigManager{
				Target: "some-target",
			},
			Expected: "some-target",
		},
	}
	for _, tt := range testcases {
		t.Run(tt.TestName, func(t *testing.T) {
			require.Equal(t, tt.Expected, tt.GetTarget(tt.Context))
		})
	}
}

func TestConfigManager_Execute(t *testing.T) {
	type sample struct {
		Field1 string `default:"some-text"`
		Field2 int    `default:"9876"`
	}
	target := "some-target"
	defer os.Remove(target)
	defer os.Remove(typgo.EnvFile)
	cfgManager := &typapp.ConfigManager{
		Target: target,
		Configs: []*typapp.Config{
			{Prefix: "SAMPLE", Spec: &sample{}},
		},
		EnvFile: true,
	}
	c := &typast.Context{
		Context: &typgo.Context{
			BuildSys: &typgo.BuildSys{},
		},
	}

	require.NoError(t, cfgManager.Annotate(c))

	b, _ := ioutil.ReadFile(target)
	require.Equal(t, []byte(`package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
)

func init() { 
	typapp.AppendCtor(
		&typapp.Constructor{
			Name: "",
			Fn: func() (cfg *typapp_test.sample, err error) {
				cfg = new(typapp_test.sample)
				if err = typgo.ProcessConfig("SAMPLE", cfg); err != nil {
					return nil, err
				}
				return
			},
		},
	)
}`), b)

	b, _ = ioutil.ReadFile(typgo.EnvFile)
	require.Equal(t, []byte("SAMPLE_FIELD1=some-text\nSAMPLE_FIELD2=9876\n"), b)
}

func TestConfigManager_Save(t *testing.T) {
	type sample struct {
		Key1 string
		Key2 string `default:"value2"`
		Key3 string `default:"value3"`
	}

	cfgManager := &typapp.ConfigManager{
		Configs: []*typapp.Config{
			{Prefix: "SAMPLE", Spec: &sample{}},
		},
	}

	t.Run("envfile not exist", func(t *testing.T) {
		target := "env1"
		defer os.Remove(target)
		require.NoError(t, cfgManager.Save(target))

		b, _ := ioutil.ReadFile(target)
		require.Equal(t, "SAMPLE_KEY1=\nSAMPLE_KEY2=value2\nSAMPLE_KEY3=value3\n", string(b))
	})

	t.Run("envfile already exist", func(t *testing.T) {
		target := "env2"
		ioutil.WriteFile(target, []byte("SAMPLE_KEY1=value11\nSAMPLE_KEY2=value22\n"), 0777)
		defer os.Remove(target)
		require.NoError(t, cfgManager.Save(target))

		b, _ := ioutil.ReadFile(target)
		require.Equal(t, "SAMPLE_KEY1=value11\nSAMPLE_KEY2=value22\nSAMPLE_KEY3=value3\n", string(b))
	})

}
