package typapp_test

import (
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/typical-go/typical-go/pkg/execkit"
	"github.com/typical-go/typical-go/pkg/typannot"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typgo"
)

func TestConfigManager_GetTarget(t *testing.T) {
	testcases := []struct {
		TestName string
		*typapp.ConfigAnnotation
		Context  *typannot.Context
		Expected string
	}{
		{
			TestName:         "initial target is not set",
			ConfigAnnotation: &typapp.ConfigAnnotation{},
			Context: &typannot.Context{
				Context: &typgo.Context{
					BuildSys: &typgo.BuildSys{
						Descriptor: &typgo.Descriptor{Name: "name0"},
					},
				},
			},
			Expected: "cmd/name0/config_annotated.go",
		},
		{
			TestName: "initial target is set",
			ConfigAnnotation: &typapp.ConfigAnnotation{
				Target: "some-target",
			},
			Expected: "some-target",
		},
	}
	for _, tt := range testcases {
		t.Run(tt.TestName, func(t *testing.T) {
			require.Equal(t, tt.Expected, tt.GetTarget(tt.Context))
		})
	}
}

func TestConfigManager_Execute(t *testing.T) {
	target := "some-target"
	defer os.Remove(target)
	defer os.Remove(typgo.EnvFile)

	unpatch := execkit.Patch([]*execkit.RunExpectation{})
	defer unpatch(t)

	cfgManager := &typapp.ConfigAnnotation{Target: target, EnvFile: true}
	c := &typannot.Context{
		Context: &typgo.Context{BuildSys: &typgo.BuildSys{}},
		ASTStore: &typannot.ASTStore{
			Annots: []*typannot.Annot{
				{
					TagName:  "@config",
					TagParam: `ctor_name:"ctor1" prefix:"SS"`,
					Decl: &typannot.Decl{
						Name:    "SomeSample",
						Package: "mypkg",
						Type: &typannot.StructType{
							Fields: []*typannot.Field{
								{Name: "SomeField1", Type: "string", StructTag: `default:"some-text"`},
								{Name: "SomeField2", Type: "int", StructTag: `default:"9876"`},
							},
						},
					},
				},
			},
		},
	}

	require.NoError(t, cfgManager.Annotate(c))

	b, _ := ioutil.ReadFile(target)
	require.Equal(t, `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"github.com/kelseyhightower/envconfig"
)

func init() { 
	typapp.AppendCtor(
		&typapp.Constructor{
			Name: "ctor1",
			Fn: func() (*mypkg.SomeSample, error) {
				var cfg mypkg.SomeSample
				if err := envconfig.Process("SS", &cfg); err != nil {
					return nil, err
				}
				return &cfg, nil
			},
		},
	)
}`, string(b))

	b, _ = ioutil.ReadFile(typgo.EnvFile)
	require.Equal(t, "SS_SOMEFIELD1=some-text\nSS_SOMEFIELD2=9876\n", string(b))
}
