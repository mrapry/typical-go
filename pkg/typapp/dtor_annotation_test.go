package typapp_test

import (
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/typical-go/typical-go/pkg/execkit"
	"github.com/typical-go/typical-go/pkg/typannot"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typgo"
)

func TestDtorAnnotation_Annotate(t *testing.T) {
	os.MkdirAll("cmd/some-project", 0777)

	unpatch := execkit.Patch([]*execkit.RunExpectation{})
	defer unpatch(t)
	defer os.RemoveAll("cmd")

	dtorAnnot := &typapp.DtorAnnotation{}
	ctx := &typannot.Context{
		Context: &typgo.Context{
			BuildSys: &typgo.BuildSys{
				Descriptor: &typgo.Descriptor{ProjectName: "some-project"},
			},
		},
		Summary: &typannot.Summary{
			Annots: []*typannot.Annot{
				{TagName: "@dtor", Decl: &typannot.Decl{Name: "Clean", Package: "pkg", Type: &typannot.FuncType{}}},
			},
		},
	}

	require.NoError(t, dtorAnnot.Annotate(ctx))

	b, _ := ioutil.ReadFile("cmd/some-project/dtor_annotated.go")
	require.Equal(t, `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"github.com/typical-go/typical-go/pkg/typapp"
)

func init() { 
	typapp.AppendDtor(
		&typapp.Destructor{Fn: pkg.Clean},
	)
}`, string(b))

}

func TestDtorAnnotation_Annotate_Predefined(t *testing.T) {
	unpatch := execkit.Patch([]*execkit.RunExpectation{})
	defer unpatch(t)
	defer os.Remove("some-target")

	dtorAnnot := &typapp.DtorAnnotation{
		Target:   "some-target",
		TagName:  "@some-tag",
		Template: "some-template",
	}
	ctx := &typannot.Context{
		Context: &typgo.Context{
			BuildSys: &typgo.BuildSys{
				Descriptor: &typgo.Descriptor{ProjectName: "some-project"},
			},
		},
		Summary: &typannot.Summary{
			Annots: []*typannot.Annot{
				{TagName: "@some-tag", Decl: &typannot.Decl{Name: "Clean", Package: "pkg", Type: &typannot.FuncType{}}},
			},
		},
	}

	require.NoError(t, dtorAnnot.Annotate(ctx))

	b, _ := ioutil.ReadFile("some-target")
	require.Equal(t, `some-template`, string(b))
}

func TestDtorAnnotation_Annotate_RemoveTargetWhenNoAnnotation(t *testing.T) {
	target := "some-target"
	defer os.Remove(target)
	ioutil.WriteFile(target, []byte("some-content"), 0777)
	dtorAnnot := &typapp.DtorAnnotation{Target: target}
	ctx := &typannot.Context{
		Context: &typgo.Context{},
		Summary: &typannot.Summary{},
	}
	require.NoError(t, dtorAnnot.Annotate(ctx))
	_, err := os.Stat(target)
	require.True(t, os.IsNotExist(err))
}
