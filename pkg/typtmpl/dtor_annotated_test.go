package typtmpl_test

import (
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/typical-go/typical-go/pkg/typast"
	"github.com/typical-go/typical-go/pkg/typtmpl"
)

func TestDtorAnnotated(t *testing.T) {
	typtmpl.TestTemplate(t, []typtmpl.TestCase{
		{
			TestName: "common constructor",
			Template: &typtmpl.DtorAnnotated{
				Package: "main",
				Imports: []string{"pkg1", "pkg2"},
				Dtors: []*typtmpl.Dtor{
					{Def: "pkg1.NewFunction1"},
				},
			},
			Expected: `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"pkg1"
	"pkg2"
)

func init() { 
	typapp.AppendDtor(
		&typapp.Destructor{Fn: pkg1.NewFunction1},
	)
}`,
		},
	})
}

func TestCreateDtor(t *testing.T) {
	testcases := []struct {
		TestName string
		*typast.Annotation
		Expected *typtmpl.Dtor
	}{
		{
			Annotation: &typast.Annotation{
				Decl: &typast.Decl{
					Package: "pkg",
					Name:    "name",
				},
			},
			Expected: &typtmpl.Dtor{
				Def: "pkg.name",
			},
		},
	}
	for _, tt := range testcases {
		t.Run(tt.TestName, func(t *testing.T) {
			require.Equal(t, tt.Expected, typtmpl.CreateDtor(tt.Annotation))
		})
	}
}
