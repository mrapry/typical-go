package typtmpl

import (
	"io"
)

type (
	// CfgGenerated template
	CfgGenerated struct {
		Package  string
		Imports  []string
		CfgCtors []*CfgCtor
	}
	// CfgCtor is config constructor model
	CfgCtor struct {
		Name      string
		Prefix    string
		SpecType  string
		SpecType2 string
	}
)

var _ Template = (*CfgGenerated)(nil)

const precond = `package {{.Package}}

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() {
	typapp.Provide({{range $c := .CfgCtors}}
		&typapp.Constructor{
			Name: "{{$c.Name}}",
			Fn: func() (cfg {{$c.SpecType}}, err error) {
				cfg = new({{$c.SpecType2}})
				if err = typgo.ProcessConfig("{{$c.Prefix}}", cfg); err != nil {
					return nil, err
				}
				return
			},
		},{{end}}
	)
}`

// Execute app precondition template
func (t *CfgGenerated) Execute(w io.Writer) (err error) {
	return Execute("appPrecond", precond, t, w)
}
