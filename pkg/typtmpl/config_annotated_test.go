package typtmpl_test

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/typical-go/typical-go/pkg/typtmpl"
)

func TestConfigAnnotated(t *testing.T) {

	testcases := []struct {
		TestName string
		typtmpl.Template
		Expected string
	}{
		{
			TestName: "constructor for configuration",
			Template: &typtmpl.ConfigAnnotated{
				Package: "main",
				Imports: []string{"pkg1", "pkg2"},
				CfgCtors: []*typtmpl.CfgCtor{
					{Name: "", Prefix: "AAA", SpecType: "Sample"},
				},
			},
			Expected: `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"pkg1"
	"pkg2"
)

func init() { 
	typapp.AppendCtor(
		&typapp.Constructor{
			Name: "",
			Fn: func() (*Sample, error) {
				var cfg Sample
				if err := typgo.ProcessConfig("AAA", &cfg); err != nil {
					return nil, err
				}
				return &cfg, nil
			},
		},
	)
}`,
		},
	}

	for _, tt := range testcases {
		t.Run(tt.TestName, func(t *testing.T) {
			var out strings.Builder
			require.NoError(t, tt.Execute(&out))
			require.Equal(t, tt.Expected, out.String())
		})
	}
}
