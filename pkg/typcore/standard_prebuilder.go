package typcore

import (
	"fmt"
	"go/build"
	"os"
	"os/exec"

	"github.com/typical-go/typical-go/pkg/common"
	"github.com/typical-go/typical-go/pkg/runn/stdrun"

	log "github.com/sirupsen/logrus"
	"github.com/typical-go/typical-go/pkg/typcore/walker"
	"github.com/typical-go/typical-go/pkg/typenv"
)

// StandardPrebuilder is standard prebuilder
type StandardPrebuilder struct{}

// Prebuild process
func (a *StandardPrebuilder) Prebuild(pc *PrebuildContext) (err error) {
	var constructors common.Strings
	if err = pc.EachAnnotation("constructor", walker.FunctionType, func(decl *walker.Declaration, ann *walker.Annotation) (err error) {
		constructors.Append(fmt.Sprintf("%s.%s", decl.File.Name, decl.SourceName))
		return
	}); err != nil {
		return
	}
	log.Info("Generate constructors")
	if err = a.generateConstructor(typenv.GeneratedConstructor, pc, constructors); err != nil {
		return
	}
	return
}

func (a *StandardPrebuilder) generateConstructor(target string, pc *PrebuildContext, constructors common.Strings) (err error) {
	defer common.ElapsedTimeFn("Generate constructor")()
	var (
		imports common.Strings
		pkg     = pc.Package
		dirs    = pc.Dirs
		ctx     = pc.Context
	)
	imports.Append(pkg + "/typical")
	for _, dir := range dirs {
		imports.Append(pkg + "/" + dir)
	}
	template := `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	{{range $import := .Imports}}"{{$import}}"
	{{end}}
)

func init() {
	{{if .Constructors}}typical.Descriptor.AppendConstructor({{range $constructor := .Constructors}}
		{{$constructor}},{{end}}
	)
{{end}}}`
	if err = stdrun.NewWriteTemplate(target, template, struct {
		Imports      []string
		Constructors []string
	}{
		Imports:      imports.Slice(),
		Constructors: constructors,
	}).Run(); err != nil {
		return
	}
	cmd := exec.CommandContext(ctx,
		fmt.Sprintf("%s/bin/goimports", build.Default.GOPATH),
		"-w", target)
	cmd.Stderr = os.Stderr
	return cmd.Run()
}
