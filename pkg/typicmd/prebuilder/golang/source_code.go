package golang

import (
	"bytes"
	"io"
	"io/ioutil"
)

// SourceCode is source code recipe for generated.go in typical package
type SourceCode struct {
	Initialization
	Imports

	PackageName string
	Structs     []Struct
	Codes       []string
}

// NewSourceCode return new instance of SourceCode
func NewSourceCode(pkgName string) *SourceCode {
	return &SourceCode{PackageName: pkgName}
}

func (r SourceCode) Write(w io.Writer) {
	writelnf(w, "// Autogenerated by Typical-Go. DO NOT EDIT.\n")
	writelnf(w, "package %s", r.PackageName)
	for _, importPogo := range r.Imports {
		writelnf(w, `import %s "%s"`, importPogo.Name, importPogo.Path)
	}
	for i := range r.Structs {
		r.Structs[i].Write(w)
	}
	if !r.Initialization.IsBlank() {
		r.Initialization.Write(w)
	}
	for _, code := range r.Codes {
		writeln(w, code)
	}
}

// Cook to generate the recipe into file
func (r SourceCode) Cook(file string) (err error) {
	var buf bytes.Buffer
	r.Write(&buf)
	err = ioutil.WriteFile(file, buf.Bytes(), 0644)
	return
}

// AddStruct to add struct
func (r *SourceCode) AddStruct(structs ...Struct) *SourceCode {
	r.Structs = append(r.Structs, structs...)
	return r
}

// Put code to source code
func (r *SourceCode) Put(code string) *SourceCode {
	r.Codes = append(r.Codes, code)
	return r
}
