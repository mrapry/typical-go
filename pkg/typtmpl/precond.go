package typtmpl

import (
	"io"
)

const precond = `package {{.Package}}

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() {
	typapp.Provide({{range $c := .Ctors}}
		&typapp.Constructor{Name: "{{$c.Name}}", Fn: {{$c.Def}}},{{end}}{{range $c := .CfgCtors}}
		&typapp.Constructor{
			Name: "{{$c.Name}}",
			Fn: func() (cfg {{$c.SpecType}}, err error) {
				cfg = new({{$c.SpecType2}})
				if err = typgo.ProcessConfig("{{$c.Prefix}}", cfg); err != nil {
					return nil, err
				}
				return
			},
		},{{end}}
	)
	typapp.Destroy({{range $d := .Dtors}}
		&typapp.Destructor{Fn: {{$d.Def}}},{{end}}
	)
}`

type (
	// Precond to generate precondition for app
	Precond struct {
		Package  string
		Imports  []string
		Ctors    []*Ctor
		CfgCtors []*CfgCtor
		Dtors    []*Dtor
	}

	// Ctor is constructor model
	Ctor struct {
		Name string
		Def  string
	}

	// Dtor is destructor model
	Dtor struct {
		Def string
	}

	// CfgCtor is config constructor model
	CfgCtor struct {
		Name      string
		Prefix    string
		SpecType  string
		SpecType2 string
	}
)

var _ Template = (*Precond)(nil)

// Execute app precondition template
func (t *Precond) Execute(w io.Writer) (err error) {
	return Execute("appPrecond", precond, t, w)
}

// NotEmpty return true if not empty
func (t *Precond) NotEmpty() bool {
	return len(t.Ctors) > 0 ||
		len(t.CfgCtors) > 0 ||
		len(t.Dtors) > 0
}
