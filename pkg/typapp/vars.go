package typapp

var (
	// Name of application. Injected from gobuild ldflags
	// `-X github.com/typical-go/typical-go/pkg/typapp.Name=PROJECT-NAME`
	Name string
	// Version of applicatoin. Injected from gobuild ldflags
	// `-X github.com/typical-go/typical-go/pkg/typapp.Version=PROJECT-NAME`
	Version string
)

const configAnnotTmpl = `package {{.Package}}

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() { {{if .Configs}}
	typapp.AppendCtor({{range $c := .Configs}}
		&typapp.Constructor{
			Name: "{{$c.CtorName}}",
			Fn: func() (*{{$c.SpecType}}, error) {
				var cfg {{$c.SpecType}}
				if err := envconfig.Process("{{$c.Prefix}}", &cfg); err != nil {
					return nil, err
				}
				return &cfg, nil
			},
		},{{end}}
	){{end}}
}`

const ctorAnnotTmpl = `package {{.Package}}

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() { {{if .Ctors}}
	typapp.AppendCtor({{range $c := .Ctors}}
		&typapp.Constructor{Name: "{{$c.Name}}", Fn: {{$c.Def}}},{{end}}
	){{end}}
}`

const dtorAnnotTmpl = `package {{.Package}}

// Autogenerated by Typical-Go. DO NOT EDIT.

import ({{range $import := .Imports}}
	"{{$import}}"{{end}}
)

func init() { {{if .Dtors}}
	typapp.AppendDtor({{range $d := .Dtors}}
		&typapp.Destructor{Fn: {{$d.Def}}},{{end}}
	){{end}}
}`
