package typbuildtool

import (
	"context"
	"fmt"
	"go/build"
	"os"
	"os/exec"

	"github.com/typical-go/typical-go/pkg/runn/stdrun"

	"github.com/typical-go/typical-go/pkg/typcore"

	log "github.com/sirupsen/logrus"
	"github.com/typical-go/typical-go/pkg/common"
	"github.com/typical-go/typical-go/pkg/typbuildtool/walker"
	"github.com/typical-go/typical-go/pkg/typenv"
)

func prebuild(ctx context.Context, d *typcore.ProjectDescriptor) (err error) {
	var (
		constructors Constructors
		projInfo     ProjectInfo
		events       walker.DeclEvents
	)
	if projInfo, err = readProject(typenv.Layout.App); err != nil {
		log.Fatal(err.Error())
	}
	log.Info("Walk the project")
	if events, err = walker.Walk(projInfo.Files); err != nil {
		return
	}
	if err = events.Send(
		walker.NewAnnotationDeclListener("constructor", walker.FunctionType, &constructors),
	); err != nil {
		return
	}
	// TODO: generate imports
	log.Info("Generate constructors")
	if err = generateConstructor(ctx, d, typenv.GeneratedConstructor, constructors, projInfo.Dirs); err != nil {
		return
	}
	return
}

func generateConstructor(ctx context.Context, d *typcore.ProjectDescriptor, target string, constructors, dirs []string) (err error) {
	defer common.ElapsedTimeFn("Generate constructor")()
	var imports common.Strings
	imports.Append(d.Package + "/typical")
	for _, dir := range dirs {
		imports.Append(d.Package + "/" + dir)
	}
	template := `package main

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	{{range $import := .Imports}}"{{$import}}"
	{{end}}
)

func init() {
	{{if .Constructors}}typical.Descriptor.AppendConstructor({{range $constructor := .Constructors}}
		{{$constructor}},{{end}}
	)
{{end}}}`
	if err = stdrun.NewWriteTemplate(target, template, struct {
		Imports      []string
		Constructors []string
	}{
		Imports:      imports.Slice(),
		Constructors: constructors,
	}).Run(); err != nil {
		return
	}
	cmd := exec.CommandContext(ctx,
		fmt.Sprintf("%s/bin/goimports", build.Default.GOPATH),
		"-w", target)
	cmd.Stderr = os.Stderr
	return cmd.Run()
}
